@page "/logs"
@using ECommerce.Blazor.Services
@using ECommerce.Domain.Entities
@using System.Text.Json
@inject ILogService LogService
@inject ILogger<Logs> Logger

<PageTitle>Request/Response Logs</PageTitle>

<div class="container-fluid">
    <h1 class="mb-4">Request/Response Logs</h1>

    <!-- Filters Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filters</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-2">
                    <label for="methodFilter" class="form-label">HTTP Method</label>
                    <select id="methodFilter" class="form-select" @bind="filter.Method">
                        <option value="">All Methods</option>
                        <option value="GET">GET</option>
                        <option value="POST">POST</option>
                        <option value="PUT">PUT</option>
                        <option value="DELETE">DELETE</option>
                        <option value="PATCH">PATCH</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="statusFilter" class="form-label">Status Code</label>
                    <select id="statusFilter" class="form-select" @bind="statusCodeFilter">
                        <option value="">All Status Codes</option>
                        <option value="200">200 - OK</option>
                        <option value="201">201 - Created</option>
                        <option value="400">400 - Bad Request</option>
                        <option value="401">401 - Unauthorized</option>
                        <option value="404">404 - Not Found</option>
                        <option value="500">500 - Internal Server Error</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="pathFilter" class="form-label">Path</label>
                    <input type="text" id="pathFilter" class="form-control" placeholder="e.g., /api/products"
                        @bind="filter.Path" />
                </div>
                <div class="col-md-2">
                    <label for="traceFilter" class="form-label">Trace ID</label>
                    <input type="text" id="traceFilter" class="form-control" placeholder="Trace ID"
                        @bind="filter.TraceId" />
                </div>
                <div class="col-md-3">
                    <label for="dateRange" class="form-label">Date Range</label>
                    <div class="input-group">
                        <input type="datetime-local" class="form-control" @bind="filter.FromDate" />
                        <span class="input-group-text">to</span>
                        <input type="datetime-local" class="form-control" @bind="filter.ToDate" />
                    </div>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12">
                    <button class="btn btn-primary me-2" @onclick="ApplyFilters">
                        <i class="bi bi-funnel"></i> Apply Filters
                    </button>
                    <button class="btn btn-secondary me-2" @onclick="ClearFilters">
                        <i class="bi bi-x-circle"></i> Clear Filters
                    </button>
                    <button class="btn btn-outline-primary" @onclick="RefreshLogs">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Summary -->
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="alert alert-info">
                <i class="bi bi-info-circle"></i>
                Showing @((filter.Page - 1) * filter.PageSize + 1) to @Math.Min(filter.Page * filter.PageSize,
                                totalCount) of @totalCount logs
            </div>
        </div>
        <div class="col-md-6 text-end">
            <div class="btn-group" role="group">
                <button class="btn btn-outline-primary" @onclick="PreviousPage" disabled="@(filter.Page <= 1)">
                    <i class="bi bi-chevron-left"></i> Previous
                </button>
                <span class="btn btn-outline-primary disabled">Page @filter.Page</span>
                <button class="btn btn-outline-primary" @onclick="NextPage"
                    disabled="@(filter.Page* filter.PageSize >= totalCount)">
                    Next <i class="bi bi-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Logs Table -->
    <div class="card">
        <div class="card-body">
            @if (logs == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!logs.Any())
            {
                <div class="alert alert-warning text-center">
                    <i class="bi bi-exclamation-triangle"></i>
                    No logs found matching your criteria.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Timestamp</th>
                                <th>Method</th>
                                <th>Path</th>
                                <th>Status</th>
                                <th>Trace ID</th>
                                <th>Duration</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in logs)
                            {
                                <tr class="@GetStatusRowClass(log.StatusCode)">
                                    <td>@log.TimestampUtc.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                    <td>
                                        <span class="badge @GetMethodBadgeClass(log.Method)">@log.Method</span>
                                    </td>
                                    <td>
                                        <code class="text-break">@log.Path</code>
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusCodeBadgeClass(log.StatusCode)">@log.StatusCode</span>
                                    </td>
                                    <td>
                                        <small class="text-muted">@log.TraceId</small>
                                    </td>
                                    <td>-</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowLogDetails(log)">
                                            <i class="bi bi-eye"></i> View
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Log Details Modal -->
@if (selectedLog != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Log Details - @selectedLog.Method @selectedLog.Path</h5>
                    <button type="button" class="btn-close" @onclick="CloseLogDetails"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Request Details</h6>
                            <div class="mb-3">
                                <strong>Headers:</strong>
                                <pre
                                    class="bg-light p-2 rounded"><code>@JsonSerializer.Serialize(selectedLog.RequestHeaders, new JsonSerializerOptions { WriteIndented = true })</code></pre>
                            </div>
                            <div class="mb-3">
                                <strong>Body:</strong>
                                <pre class="bg-light p-2 rounded"><code>@selectedLog.RequestBody</code></pre>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>Response Details</h6>
                            <div class="mb-3">
                                <strong>Headers:</strong>
                                <pre
                                    class="bg-light p-2 rounded"><code>@JsonSerializer.Serialize(selectedLog.ResponseHeaders, new JsonSerializerOptions { WriteIndented = true })</code></pre>
                            </div>
                            <div class="mb-3">
                                <strong>Body:</strong>
                                <pre class="bg-light p-2 rounded"><code>@selectedLog.ResponseBody</code></pre>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseLogDetails">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<RequestResponseLog>? logs;
    private RequestResponseLog? selectedLog;
    private LogFilter filter = new();
    private string statusCodeFilter = "";
    private long totalCount;

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        try
        {
            if (!string.IsNullOrEmpty(statusCodeFilter) && int.TryParse(statusCodeFilter, out var statusCode))
            {
                filter.StatusCode = statusCode;
            }
            else
            {
                filter.StatusCode = null;
            }

            logs = await LogService.GetLogsAsync(filter);
            totalCount = await LogService.GetLogsCountAsync(filter);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load logs");
            // You might want to show an error message to the user
        }
    }

    private async Task ApplyFilters()
    {
        filter.Page = 1; // Reset to first page
        await LoadLogs();
    }

    private async Task ClearFilters()
    {
        filter = new LogFilter();
        statusCodeFilter = "";
        await LoadLogs();
    }

    private async Task RefreshLogs()
    {
        await LoadLogs();
    }

    private async Task PreviousPage()
    {
        if (filter.Page > 1)
        {
            filter.Page--;
            await LoadLogs();
        }
    }

    private async Task NextPage()
    {
        if (filter.Page * filter.PageSize < totalCount)
        {
            filter.Page++;
            await LoadLogs();
        }
    }

    private void ShowLogDetails(RequestResponseLog log)
    {
        selectedLog = log;
    }

    private void CloseLogDetails()
    {
        selectedLog = null;
    }

    private string GetStatusRowClass(int statusCode)
    {
        return statusCode switch
        {
            >= 200 and < 300 => "table-success",
            >= 400 and < 500 => "table-warning",
            >= 500 => "table-danger",
            _ => ""
        };
    }

    private string GetMethodBadgeClass(string method)
    {
        return method switch
        {
            "GET" => "bg-success",
            "POST" => "bg-primary",
            "PUT" => "bg-warning",
            "DELETE" => "bg-danger",
            "PATCH" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetStatusCodeBadgeClass(int statusCode)
    {
        return statusCode switch
        {
            >= 200 and < 300 => "bg-success",
            >= 400 and < 500 => "bg-warning",
            >= 500 => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
